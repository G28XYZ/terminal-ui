{
  "compilerOptions": {
    "module": "esnext",
    "target": "ES2015", // Тип кода создаваемого итогового файла.
    "lib": ["dom", "dom.iterable", "esnext"],
    "sourceMap": true,
    "allowJs": true, // Разрешать компилировать файлы с JavaScript-кодом?
    "jsx": "react", // Включать ли поддержку ".tsx" файлов?
    "declaration": true, // Создавать ли соответствующие файлы ".d.ts"?
    "moduleResolution": "Bundler", // Определить способ поиска модулей в папках: как в Node.js или классический, как в TypeScript 1.5 и ниже.
    "allowSyntheticDefaultImports": true, // Разрешить импортировать модули не имеющие внутри себя "import default"?
    "noImplicitAny": true, // Показывать ошибку, если где-то задан тип "any".
    "outDir": "dist",
    "rootDir": "src",
    "resolveJsonModule": true,
    "downlevelIteration": true, // Обеспечьте полную поддержку итераций для for - in, ..., деструктуризации при настройке на ES5 или ES3?
    "strict": true, // Включить ли все строгие проверки типов сразу: noImplicitAny, noImplicitThis, alwaysStrict, strictNullChecks, strictFunctionTypes, strictPropertyInitialization?
    "strictNullChecks": false, // Значения "null" и "undefined" могут быть присвоены только значениям данного типа и значениям только с типом "any"?
    "isolatedModules": true, // Обрабатывать каждый файл, как отдельный изолированный модуль.
    "forceConsistentCasingInFileNames": true, // Запретить несогласованные ссылки на один и тот же файл?
    "noImplicitReturns": false, // Сообщить об ошибке, когда не все пути кода в функции возвращают значение?
    "noImplicitThis": false, // Показывать ошибку на "this", если где-то задан тип "any".
    "noUnusedParameters": false, // Показывать ошибку, если где-то найдены неиспользуемые параметры.
    "noUnusedLocals": false, // Показывать ошибку, если где-то найдены неиспользуемые локальные значения.
  },
  "include": ["src", "globals.d.ts"],
  "exclude": ["node_modules", "dist", "vite.config.ts"]
}
